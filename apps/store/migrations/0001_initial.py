# Generated by Django 4.1.5 on 2023-02-01 19:59

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('company', models.CharField(blank=True, max_length=255, null=True)),
                ('first_name', models.CharField(blank=True, max_length=255, null=True)),
                ('last_name', models.CharField(blank=True, max_length=255, null=True)),
                ('address_1', models.CharField(blank=True, max_length=255, null=True)),
                ('address_2', models.CharField(blank=True, max_length=255, null=True)),
                ('city', models.CharField(blank=True, max_length=255, null=True)),
                ('country_code', models.CharField(blank=True, max_length=255, null=True)),
                ('province', models.CharField(blank=True, max_length=255, null=True)),
                ('postal_code', models.CharField(blank=True, max_length=255, null=True)),
                ('phone', models.CharField(blank=True, max_length=255, null=True)),
                ('metadata', models.JSONField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('type', models.CharField(choices=[('default', 'Default'), ('swap', 'Swap'), ('draft_order', 'Draft Order'), ('payment_link', 'Payment Link'), ('claim', 'Claim')], default='default', max_length=20)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('payment_authorized_at', models.DateTimeField(blank=True, null=True)),
                ('idempotency_key', models.CharField(blank=True, max_length=255, null=True)),
                ('context', models.JSONField(blank=True, null=True)),
                ('metadata', models.JSONField()),
                ('billing_address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='store.address')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ClaimImage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('url', models.CharField(max_length=255)),
                ('metadata', models.JSONField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ClaimItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('reason', models.CharField(choices=[('missing_item', 'Missing Item'), ('wrong_item', 'Wrong Item'), ('production_failure', 'Production Failure'), ('other', 'Other')], max_length=255)),
                ('note', models.TextField(blank=True, null=True)),
                ('quantity', models.IntegerField()),
                ('metadata', models.JSONField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ClaimOrder',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('payment_status', models.CharField(choices=[('na', 'NA'), ('not_refunded', 'NOT_REFUNDED'), ('refunded', 'REFUNDED')], default='na', max_length=20)),
                ('fulfillment_status', models.CharField(choices=[('na', 'NA'), ('not_refunded', 'NOT_REFUNDED'), ('refunded', 'REFUNDED')], default='not_fulfilled', max_length=20)),
                ('type', models.CharField(choices=[('refund', 'REFUND'), ('replace', 'REPLACE')], max_length=20)),
                ('refund_amount', models.IntegerField(blank=True, null=True)),
                ('canceled_at', models.DateTimeField(blank=True, null=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('no_notification', models.BooleanField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, null=True)),
                ('idempotency_key', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ClaimTag',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('value', models.CharField(max_length=255, unique=True)),
                ('metadata', models.JSONField(null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('iso_2', models.CharField(max_length=255, unique=True)),
                ('iso_3', models.CharField(max_length=255)),
                ('num_code', models.IntegerField()),
                ('name', models.CharField(max_length=255)),
                ('display_name', models.CharField(max_length=255)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('code', models.CharField(max_length=255, unique=True)),
                ('symbol', models.CharField(max_length=255)),
                ('symbol_native', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('includes_tax', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('email', models.EmailField(max_length=254, unique=True, validators=[django.core.validators.EmailValidator()])),
                ('first_name', models.CharField(blank=True, max_length=255, null=True)),
                ('last_name', models.CharField(blank=True, max_length=255, null=True)),
                ('phone', models.CharField(blank=True, max_length=255, null=True)),
                ('has_account', models.BooleanField(default=False)),
                ('password_hash', models.CharField(blank=True, max_length=255, null=True)),
                ('metadata', models.JSONField(blank=True, null=True)),
                ('billing_address', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='store.address')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CustomerGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('metadata', models.JSONField(null=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('customers', models.ManyToManyField(related_name='+', to='store.customer')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Discount',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('code', models.CharField(max_length=255, unique=True)),
                ('is_dynamic', models.BooleanField()),
                ('is_disabled', models.BooleanField()),
                ('starts_at', models.DateTimeField(auto_now_add=True)),
                ('ends_at', models.DateTimeField(blank=True, null=True)),
                ('valid_duration', models.CharField(blank=True, max_length=255, null=True)),
                ('usage_limit', models.IntegerField(blank=True, null=True)),
                ('usage_count', models.IntegerField(default=0)),
                ('metadata', models.JSONField(blank=True, null=True)),
                ('parent_discount', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='store.discount')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DiscountCondition',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('type', models.CharField(choices=[('products', 'PRODUCTS'), ('product_types', 'PRODUCT_TYPES'), ('product_collections', 'PRODUCT_COLLECTIONS'), ('product_tags', 'PRODUCT_TAGS'), ('customer_groups', 'CUSTOMER_GROUPS')], max_length=20)),
                ('operator', models.CharField(choices=[('in', 'IN'), ('not_in', 'NOT_IN')], max_length=20)),
                ('metadata', models.JSONField(null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DraftOrder',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('status', models.CharField(choices=[('open', 'OPEN'), ('completed', 'COMPLETED')], default='OPEN', max_length=10)),
                ('canceled_at', models.DateTimeField(null=True)),
                ('completed_at', models.DateTimeField(null=True)),
                ('no_notification_order', models.BooleanField(null=True)),
                ('metadata', models.JSONField(null=True)),
                ('idempotency_key', models.CharField(max_length=255, null=True)),
                ('cart', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.cart')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Fulfillment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('no_notification', models.BooleanField(null=True)),
                ('location_id', models.CharField(max_length=255, null=True)),
                ('tracking_numbers', models.JSONField(default=dict)),
                ('data', models.JSONField()),
                ('shipped_at', models.DateTimeField(null=True)),
                ('canceled_at', models.DateTimeField(null=True)),
                ('metadata', models.JSONField(null=True)),
                ('idempotency_key', models.CharField(max_length=255, null=True)),
                ('claim_order', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.claimorder')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FulfillmentProvider',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('is_installed', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GiftCard',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('code', models.CharField(max_length=255, unique=True)),
                ('value', models.IntegerField()),
                ('balance', models.IntegerField()),
                ('is_disabled', models.BooleanField(default=False)),
                ('ends_at', models.DateTimeField(blank=True, null=True)),
                ('tax_rate', models.FloatField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='IdempotencyKey',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('idempotency_key', models.CharField(max_length=255, unique=True)),
                ('locked_at', models.DateTimeField(blank=True, null=True)),
                ('request_method', models.CharField(blank=True, max_length=255, null=True)),
                ('request_params', models.JSONField(blank=True, null=True)),
                ('request_path', models.CharField(blank=True, max_length=255, null=True)),
                ('response_code', models.IntegerField(blank=True, null=True)),
                ('response_body', models.JSONField(blank=True, null=True)),
                ('recovery_point', models.CharField(default='started', max_length=255)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('url', models.CharField(blank=True, max_length=255, null=True)),
                ('metadata', models.JSONField(blank=True, null=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Invite',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('user_email', models.EmailField(max_length=254, unique=True)),
                ('role', models.CharField(choices=[('admin', 'ADMIN'), ('member', 'MEMBER'), ('developer', 'DEVELOPER')], max_length=20)),
                ('accepted', models.BooleanField(default=False)),
                ('token', models.CharField(max_length=255)),
                ('expires_at', models.DateTimeField()),
                ('metadata', models.JSONField(null=True)),
                ('deleted_at', models.DateTimeField(null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LineItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField(null=True)),
                ('thumbnail', models.TextField(null=True)),
                ('is_return', models.BooleanField(default=False)),
                ('is_giftcard', models.BooleanField(default=False)),
                ('should_merge', models.BooleanField(default=True)),
                ('allow_discounts', models.BooleanField(default=True)),
                ('has_shipping', models.BooleanField(null=True)),
                ('unit_price', models.IntegerField()),
                ('quantity', models.IntegerField()),
                ('fulfilled_quantity', models.PositiveIntegerField(null=True)),
                ('returned_quantity', models.PositiveIntegerField(null=True)),
                ('shipped_quantity', models.PositiveIntegerField(null=True)),
                ('metadata', models.JSONField(null=True)),
                ('includes_tax', models.BooleanField(default=False)),
                ('refundable', models.PositiveIntegerField(null=True)),
                ('subtotal', models.PositiveIntegerField(null=True)),
                ('tax_total', models.PositiveIntegerField(null=True)),
                ('total', models.PositiveIntegerField(null=True)),
                ('original_total', models.PositiveIntegerField(null=True)),
                ('original_tax_total', models.PositiveIntegerField(null=True)),
                ('discount_total', models.PositiveIntegerField(null=True)),
                ('gift_cart_total', models.PositiveIntegerField(null=True)),
                ('cart', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='store.cart')),
                ('claim_order', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='store.claimorder')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NotificationProvider',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('is_installed', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Oauth',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('display_name', models.CharField(max_length=255)),
                ('application_name', models.CharField(max_length=255, unique=True)),
                ('install_url', models.CharField(max_length=255, null=True)),
                ('uninstall_url', models.CharField(max_length=255, null=True)),
                ('data', models.JSONField(null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'PENDING'), ('completed', 'COMPLETED'), ('archived', 'ARCHIVED'), ('canceled', 'CANCELED'), ('requires_action', 'REQUIRES_ACTION')], default='Not PAID', max_length=20)),
                ('fulfillment_status', models.CharField(choices=[('not_fulfilled', 'NOT_FULFILLED'), ('partially_fulfilled', 'PARTIALLY_FULFILLED'), ('fulfilled', 'FULFILLED'), ('partially_shipped', 'PARTIALLY_SHIPPED'), ('shipped', 'SHIPPED'), ('partially_returned', 'PARTIALLY_RETURNED'), ('returned', 'RETURNED'), ('canceled', 'CANCELED'), ('requires_action', 'REQUIRES_ACTION')], default='NOT_FULFILLED', max_length=20)),
                ('payment_status', models.CharField(choices=[('not_paid', 'NOT PAID'), ('awaiting', 'AWAITING'), ('captured', 'CAPTURED'), ('partially_refunded', 'PARTIALLY REFUNDED'), ('refunded', 'REFUNDED'), ('canceled', 'CANCELED'), ('requires_action', 'REQUIRES ACTION')], default='NOT PAID', max_length=20)),
                ('email', models.EmailField(max_length=254)),
                ('order_number', models.CharField(max_length=255, unique=True)),
                ('order_date', models.DateTimeField(auto_now_add=True)),
                ('subtotal_price', models.DecimalField(decimal_places=2, max_digits=20)),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=20)),
                ('tax_rate', models.FloatField(null=True)),
                ('canceled_at', models.DateField(null=True)),
                ('metadata', models.JSONField(null=True)),
                ('no_notification', models.BooleanField(null=True)),
                ('idempotency_key', models.CharField(max_length=255, null=True)),
                ('external_id', models.CharField(blank=True, max_length=255, null=True)),
                ('shipping_total', models.IntegerField()),
                ('discount_total', models.FloatField()),
                ('tax_total', models.FloatField(null=True)),
                ('refunded_total', models.FloatField()),
                ('total', models.FloatField()),
                ('sub_total', models.FloatField()),
                ('paid_total', models.FloatField()),
                ('refundable_amount', models.FloatField()),
                ('gift_card_total', models.FloatField()),
                ('gift_card_tax_total', models.FloatField()),
                ('billing_address', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.address')),
                ('cart', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.cart')),
                ('currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.currency')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.customer')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OrderEdit',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('internal_note', models.TextField(null=True)),
                ('created_by', models.CharField(max_length=255)),
                ('requested_by', models.CharField(max_length=255, null=True)),
                ('requested_at', models.DateTimeField(null=True)),
                ('confirmed_by', models.CharField(max_length=255, null=True)),
                ('confirmed_at', models.DateTimeField(null=True)),
                ('declined_by', models.CharField(max_length=255, null=True)),
                ('declined_reason', models.TextField(null=True)),
                ('declined_at', models.DateTimeField(null=True)),
                ('canceled_by', models.CharField(max_length=255, null=True)),
                ('canceled_at', models.DateTimeField(null=True)),
                ('shipping_total', models.IntegerField()),
                ('discount_total', models.FloatField()),
                ('tax_total', models.FloatField(null=True)),
                ('total', models.FloatField()),
                ('subtotal', models.FloatField()),
                ('gift_card_total', models.FloatField()),
                ('gift_card_tax_total', models.FloatField()),
                ('difference_due', models.FloatField()),
                ('status', models.CharField(choices=[('confirmed', 'CONFIRMED'), ('declined', 'DECLINED'), ('requested', 'REQUESTED'), ('created', 'CREATED'), ('canceled', 'CANCELED')], default='CREATED', max_length=20)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('amount', models.FloatField()),
                ('amount_refunded', models.FloatField(default=0)),
                ('provider_id', models.CharField(max_length=255)),
                ('data', models.JSONField()),
                ('captured_at', models.DateTimeField(null=True)),
                ('canceled_at', models.DateTimeField(null=True)),
                ('metadata', models.JSONField(null=True)),
                ('idempotency_key', models.CharField(max_length=255, null=True)),
                ('cart', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='store.cart')),
                ('currency', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='store.currency')),
                ('order', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='store.order')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PaymentProvider',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('is_installed', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('title', models.CharField(max_length=255)),
                ('subtitle', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('handle', models.TextField(blank=True, null=True, unique=True)),
                ('is_gift_card', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('draft', 'DRAFT'), ('proposed', 'PROPOSED'), ('published', 'PUBLISHED'), ('rejected', 'REJECTED')], default='draft', max_length=255)),
                ('thumbnail', models.TextField(blank=True, null=True)),
                ('weight', models.PositiveIntegerField(blank=True, null=True)),
                ('length', models.PositiveIntegerField(blank=True, null=True)),
                ('height', models.PositiveIntegerField(blank=True, null=True)),
                ('width', models.PositiveIntegerField(blank=True, null=True)),
                ('hs_code', models.TextField(blank=True, null=True)),
                ('origin_country', models.TextField(blank=True, null=True)),
                ('mid_code', models.TextField(blank=True, null=True)),
                ('material', models.TextField(blank=True, null=True)),
                ('discountable', models.BooleanField(default=True)),
                ('external_id', models.TextField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProductOption',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('title', models.CharField(max_length=255)),
                ('metadata', models.JSONField(null=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.product')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProductTag',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('value', models.CharField(blank=True, max_length=255, null=True)),
                ('metadata', models.JSONField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProductTaxRate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('metadata', models.JSONField(null=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.product')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProductType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('value', models.CharField(blank=True, max_length=255, null=True)),
                ('metadata', models.JSONField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProductTypeTaxRate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('metadata', models.JSONField(blank=True, null=True)),
                ('product_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.producttype')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PublishableApiKey',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('created_by', models.CharField(max_length=100, null=True)),
                ('revoked_by', models.CharField(max_length=100, null=True)),
                ('revoked_at', models.DateTimeField(null=True)),
                ('title', models.CharField(max_length=100)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PublishableApiKeySalesChannel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('sales_channel_id', models.CharField(max_length=100, unique=True)),
                ('publishable_key_id', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=100)),
                ('tax_rate', models.FloatField()),
                ('tax_code', models.CharField(max_length=100, null=True)),
                ('gift_cards_taxable', models.BooleanField(default=True)),
                ('automatic_taxes', models.BooleanField(default=True)),
                ('metadata', models.JSONField(null=True)),
                ('includes_tax', models.BooleanField(default=False)),
                ('countries', models.ManyToManyField(related_name='+', to='store.country')),
                ('currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.currency')),
                ('fulfillment_providers', models.ManyToManyField(related_name='+', to='store.fulfillmentprovider')),
                ('payment_providers', models.ManyToManyField(related_name='+', to='store.paymentprovider')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Return',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('status', models.CharField(choices=[('requested', 'REQUESTED'), ('received', 'RECEIVED'), ('requires_action', 'REQUIRES_ACTION'), ('canceled', 'CANCELED')], default='REQUESTED', max_length=20)),
                ('shipping_data', models.JSONField(null=True)),
                ('refund_amount', models.FloatField()),
                ('received_at', models.DateTimeField(null=True)),
                ('no_notification', models.BooleanField()),
                ('metadata', models.JSONField(null=True)),
                ('idempotency_key', models.CharField(max_length=100, null=True)),
                ('claim_order', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='store.claimorder')),
                ('order', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='store.order')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SalesChannel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('is_disabled', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SalesChannelLocation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('sales_channel_id', models.CharField(max_length=255)),
                ('location_id', models.CharField(max_length=255)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ShippingOption',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=255)),
                ('price_type', models.CharField(choices=[('flat_rate', 'FLAT_RATE'), ('calculated', 'CALCULATED')], default='FLAT_RATE', max_length=20)),
                ('amount', models.PositiveIntegerField(null=True)),
                ('is_return', models.BooleanField(default=False)),
                ('admin_only', models.BooleanField(default=False)),
                ('data', models.JSONField()),
                ('metadata', models.JSONField(null=True)),
                ('includes_tax', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ShippingProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=255)),
                ('type', models.CharField(choices=[('default', 'DEFAULT'), ('gift_card', 'GIFT_CARD'), ('custom', 'CUSTOM')], max_length=255)),
                ('metadata', models.JSONField(null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ShippingTaxRate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('metadata', models.JSONField(null=True)),
                ('shipping_option', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.shippingoption')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StagedJob',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('event_name', models.CharField(max_length=255)),
                ('data', models.JSONField()),
                ('options', models.JSONField(default=dict)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TaxLine',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('rate', models.FloatField()),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('code', models.CharField(blank=True, max_length=255, null=True)),
                ('metadata', models.JSONField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TaxProvider',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('is_installed', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TrackingLink',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('url', models.URLField(blank=True, null=True)),
                ('tracking_number', models.CharField(max_length=255)),
                ('idempotency_key', models.CharField(blank=True, max_length=255, null=True)),
                ('metadata', models.JSONField(blank=True, null=True)),
                ('fulfillment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.fulfillment')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TaxRate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('rate', models.FloatField(null=True)),
                ('code', models.CharField(max_length=255, null=True)),
                ('name', models.CharField(max_length=255)),
                ('metadata', models.JSONField(null=True)),
                ('product_count', models.IntegerField(blank=True, null=True)),
                ('product_type_count', models.IntegerField(blank=True, null=True)),
                ('shipping_option_count', models.IntegerField(blank=True, null=True)),
                ('product_types', models.ManyToManyField(through='store.ProductTypeTaxRate', to='store.producttype')),
                ('products', models.ManyToManyField(through='store.ProductTaxRate', to='store.product')),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.region')),
                ('shipping_options', models.ManyToManyField(through='store.ShippingTaxRate', to='store.shippingoption')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Swap',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('fulfillment_status', models.CharField(choices=[('not_fulfilled', 'NOT_FULFILLED'), ('fulfilled', 'FULFILLED'), ('shipped', 'SHIPPED'), ('partially_shipped', 'PARTIALLY_SHIPPED'), ('canceled', 'CANCELED'), ('requires_action', 'REQUIRES_ACTION')], default='NOT_FULFILLED', max_length=20)),
                ('payment_status', models.CharField(choices=[('not_paid', 'NOT_PAID'), ('awaiting', 'AWAITING'), ('captured', 'CAPTURED'), ('confirmed', 'CONFIRMED'), ('canceled', 'CANCELED'), ('difference_refunded', 'DIFFERENCE_REFUNDED'), ('partially_refunded', 'PARTIALLY_REFUNDED'), ('refunded', 'REFUNDED'), ('requires_action', 'REQUIRES_ACTION')], default='NOT_PAID', max_length=20)),
                ('difference_due', models.IntegerField(null=True)),
                ('confirmed_at', models.DateTimeField(null=True)),
                ('canceled_at', models.DateTimeField(null=True)),
                ('no_notification', models.BooleanField(null=True)),
                ('allow_back_order', models.BooleanField(default=False)),
                ('idempotency_key', models.CharField(max_length=255, null=True)),
                ('metadata', models.JSONField(null=True)),
                ('cart', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.cart')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.order')),
                ('payment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.payment')),
                ('return_order', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.return')),
                ('shipping_address', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.address')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Store',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=255)),
                ('default_currency_code', models.CharField(default='usd', max_length=255)),
                ('swap_link_template', models.TextField(blank=True, null=True)),
                ('payment_link_template', models.TextField(blank=True, null=True)),
                ('invite_link_template', models.TextField(blank=True, null=True)),
                ('default_location_id', models.CharField(max_length=255, null=True)),
                ('metadata', models.JSONField(blank=True, null=True)),
                ('default_sales_channel', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='store.saleschannel')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='shippingtaxrate',
            name='tax_rate',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.taxrate'),
        ),
        migrations.CreateModel(
            name='ShippingOptionRequirement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('type', models.CharField(choices=[('min_subtotal', 'MIN_SUBTOTAL'), ('max_subtotal', 'MAX_SUBTOTAL')], max_length=32)),
                ('amount', models.IntegerField()),
                ('deleted_at', models.DateTimeField(null=True)),
                ('shipping_option', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.shippingoption')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='shippingoption',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.shippingprofile'),
        ),
        migrations.AddField(
            model_name='shippingoption',
            name='provider',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.fulfillmentprovider'),
        ),
        migrations.AddField(
            model_name='shippingoption',
            name='region',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.region'),
        ),
        migrations.CreateModel(
            name='ShippingMethod',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('price', models.PositiveIntegerField()),
                ('data', models.JSONField()),
                ('includes_tax', models.BooleanField(default=False)),
                ('subtotal', models.PositiveIntegerField(null=True)),
                ('total', models.PositiveIntegerField(null=True)),
                ('tax_total', models.PositiveIntegerField(null=True)),
                ('cart', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.cart')),
                ('claim_order', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.claimorder')),
                ('order', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.order')),
                ('return_order', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.return')),
                ('shipping_option', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.shippingoption')),
                ('swap', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.swap')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReturnReason',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('value', models.CharField(max_length=255, unique=True)),
                ('label', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, null=True)),
                ('parent_return_reason', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='store.returnreason')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReturnItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('quantity', models.IntegerField()),
                ('is_requested', models.BooleanField(default=True)),
                ('requested_quantity', models.IntegerField(null=True)),
                ('received_quantity', models.IntegerField(null=True)),
                ('note', models.TextField(null=True)),
                ('metadata', models.JSONField(null=True)),
                ('item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='return_items', to='store.lineitem')),
                ('reason', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='store.returnreason')),
                ('return_order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='return_items', to='store.return')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='return',
            name='shipping_method',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.shippingmethod'),
        ),
        migrations.AddField(
            model_name='return',
            name='swap',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='store.swap'),
        ),
        migrations.AddField(
            model_name='region',
            name='tax_provider',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='store.taxprovider'),
        ),
        migrations.AddField(
            model_name='region',
            name='tax_rates',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='store.taxrate'),
        ),
        migrations.CreateModel(
            name='Refund',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('amount', models.IntegerField()),
                ('note', models.TextField(null=True)),
                ('reason', models.CharField(choices=[('discount', 'DISCOUNT'), ('return', 'RETURN'), ('swap', 'SWAP'), ('claim', 'CLAIM'), ('other', 'OTHER')], max_length=16)),
                ('metadata', models.JSONField(null=True)),
                ('idempotency_key', models.CharField(max_length=255, null=True)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.order')),
                ('payment', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='store.payment')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProductVariantInventoryItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('inventory_item_id', models.TextField(unique=True)),
                ('variant_id', models.TextField(unique=True)),
                ('required_quantity', models.PositiveIntegerField(default=1)),
            ],
            options={
                'unique_together': {('variant_id', 'inventory_item_id')},
            },
        ),
        migrations.CreateModel(
            name='ProductVariant',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('title', models.CharField(max_length=255)),
                ('sku', models.CharField(max_length=255, null=True, unique=True)),
                ('barcode', models.CharField(max_length=255, null=True, unique=True)),
                ('ean', models.CharField(max_length=255, null=True, unique=True)),
                ('upc', models.CharField(max_length=255, null=True, unique=True)),
                ('variant_rank', models.PositiveIntegerField(default=0)),
                ('inventory_quantity', models.PositiveIntegerField()),
                ('allow_backorder', models.BooleanField(default=False)),
                ('manage_inventory', models.BooleanField(default=True)),
                ('hs_code', models.CharField(max_length=255, null=True)),
                ('origin_country', models.CharField(max_length=255, null=True)),
                ('mid_code', models.CharField(max_length=255, null=True)),
                ('material', models.CharField(max_length=255, null=True)),
                ('weight', models.IntegerField(blank=True, null=True)),
                ('length', models.IntegerField(blank=True, null=True)),
                ('height', models.IntegerField(blank=True, null=True)),
                ('width', models.IntegerField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, null=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.product')),
            ],
            options={
                'unique_together': {('sku', 'barcode', 'ean', 'upc')},
            },
        ),
        migrations.AddField(
            model_name='producttypetaxrate',
            name='tax_rate',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.taxrate'),
        ),
        migrations.AddField(
            model_name='producttaxrate',
            name='tax_rate',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.taxrate'),
        ),
        migrations.CreateModel(
            name='ProductOptionValue',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('value', models.CharField(max_length=255)),
                ('metadata', models.JSONField(null=True)),
                ('option', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.productoption')),
                ('variant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.productvariant')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProductCollection',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('title', models.CharField(max_length=255)),
                ('handle', models.CharField(max_length=255, null=True, unique=True)),
                ('metadata', models.JSONField(null=True)),
                ('products', models.ManyToManyField(related_name='+', to='store.product')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=255)),
                ('handle', models.CharField(max_length=255, unique=True)),
                ('is_active', models.BooleanField(default=False)),
                ('is_internal', models.BooleanField(default=False)),
                ('parent_category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='store.productcategory')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='product',
            name='collection',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='store.productcollection'),
        ),
        migrations.AddField(
            model_name='product',
            name='images',
            field=models.ManyToManyField(related_name='+', to='store.image'),
        ),
        migrations.AddField(
            model_name='product',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.shippingprofile'),
        ),
        migrations.AddField(
            model_name='product',
            name='sales_channels',
            field=models.ManyToManyField(related_name='+', to='store.saleschannel'),
        ),
        migrations.AddField(
            model_name='product',
            name='tags',
            field=models.ManyToManyField(related_name='+', to='store.producttag'),
        ),
        migrations.AddField(
            model_name='product',
            name='type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='store.producttype'),
        ),
        migrations.CreateModel(
            name='PriceList',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('type', models.CharField(default='sale', max_length=255)),
                ('status', models.CharField(default='draft', max_length=255)),
                ('starts_at', models.DateTimeField(blank=True, null=True)),
                ('ends_at', models.DateTimeField(blank=True, null=True)),
                ('includes_tax', models.BooleanField(default=False)),
                ('customer_groups', models.ManyToManyField(related_name='+', to='store.customergroup')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PaymentSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('provider_id', models.CharField(max_length=100)),
                ('is_selected', models.BooleanField(null=True)),
                ('is_initiated', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('authorized', 'AUTHORIZED'), ('pending', 'PENDING'), ('requires_more', 'REQUIRES_MORE'), ('error', 'ERROR'), ('canceled', 'CANCELED')], max_length=100)),
                ('data', models.JSONField()),
                ('idempotency_key', models.CharField(max_length=100, null=True)),
                ('amount', models.FloatField(null=True)),
                ('payment_authorized_at', models.DateTimeField(null=True)),
                ('cart', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.cart')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PaymentCollection',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('type', models.CharField(choices=[('not_paid', 'NOT_PAID'), ('awaiting', 'AWAITING'), ('authorized', 'AUTHORIZED'), ('partially_authorized', 'PARTIALLY_AUTHORIZED'), ('canceled', 'CANCELED')], max_length=20)),
                ('status', models.CharField(choices=[('order_edit', 'ORDER_EDIT')], max_length=20)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('amount', models.FloatField()),
                ('authorized_amount', models.FloatField(blank=True, null=True)),
                ('metadata', models.JSONField()),
                ('created_by', models.CharField(max_length=255)),
                ('currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.currency')),
                ('payment_sessions', models.ManyToManyField(to='store.paymentsession')),
                ('payments', models.ManyToManyField(to='store.payment')),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.region')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='payment',
            name='swap',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='store.swap'),
        ),
        migrations.CreateModel(
            name='OrderItemChange',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('type', models.CharField(choices=[('item_add', 'ITEM_ADD'), ('item_remove', 'ITEM_REMOVE'), ('item_update', 'ITEM_UPDATE')], max_length=20)),
                ('line_item', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='store.lineitem')),
                ('order_edit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.orderedit')),
                ('original_line_item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='store.lineitem')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OrderGiftCard',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('gift_card', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.giftcard')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.order')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='orderedit',
            name='changes',
            field=models.ManyToManyField(related_name='+', to='store.orderitemchange'),
        ),
        migrations.AddField(
            model_name='orderedit',
            name='items',
            field=models.ManyToManyField(related_name='+', to='store.lineitem'),
        ),
        migrations.AddField(
            model_name='orderedit',
            name='order',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.order'),
        ),
        migrations.AddField(
            model_name='orderedit',
            name='payment_collection',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='store.paymentcollection'),
        ),
        migrations.CreateModel(
            name='OrderDiscount',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('discount', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.discount')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.order')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='order',
            name='discounts',
            field=models.ManyToManyField(related_name='+', through='store.OrderDiscount', to='store.discount'),
        ),
        migrations.AddField(
            model_name='order',
            name='draft_order',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.draftorder'),
        ),
        migrations.AddField(
            model_name='order',
            name='gift_cards',
            field=models.ManyToManyField(related_name='+', through='store.OrderGiftCard', to='store.giftcard'),
        ),
        migrations.AddField(
            model_name='order',
            name='region',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.region'),
        ),
        migrations.AddField(
            model_name='order',
            name='sales_channel',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.saleschannel'),
        ),
        migrations.AddField(
            model_name='order',
            name='shipping_address',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.address'),
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('event_name', models.CharField(max_length=255, null=True)),
                ('resource_type', models.CharField(max_length=255)),
                ('resource_id', models.CharField(max_length=255)),
                ('to', models.CharField(max_length=255)),
                ('data', models.JSONField()),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.customer')),
                ('parent_notification', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.notification')),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.notificationprovider')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('value', models.TextField()),
                ('resource_type', models.CharField(blank=True, max_length=255, null=True)),
                ('resource_id', models.CharField(blank=True, max_length=255, null=True)),
                ('metadata', models.JSONField(null=True)),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MoneyAmount',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('amount', models.FloatField()),
                ('min_quantity', models.IntegerField(null=True)),
                ('max_quantity', models.IntegerField(null=True)),
                ('currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.currency')),
                ('price_list', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.pricelist')),
                ('region', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.region')),
                ('variant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.productvariant')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LineItemTaxLine',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('code', models.CharField(max_length=255, unique=True)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.lineitem')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LineItemAdjustment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('description', models.CharField(max_length=255)),
                ('amount', models.IntegerField()),
                ('metadata', models.JSONField(blank=True, null=True)),
                ('discount', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='store.discount')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.lineitem')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='lineitem',
            name='order',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='store.order'),
        ),
        migrations.AddField(
            model_name='lineitem',
            name='order_edit',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='store.orderedit'),
        ),
        migrations.AddField(
            model_name='lineitem',
            name='original_item',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='store.lineitem'),
        ),
        migrations.AddField(
            model_name='lineitem',
            name='swap',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='store.swap'),
        ),
        migrations.AddField(
            model_name='lineitem',
            name='variant',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='store.productvariant'),
        ),
        migrations.AddField(
            model_name='giftcard',
            name='order',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='store.order'),
        ),
        migrations.AddField(
            model_name='giftcard',
            name='region',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.region'),
        ),
        migrations.CreateModel(
            name='FulfillmentItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('quantity', models.IntegerField()),
                ('fulfillment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.fulfillment')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.lineitem')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='fulfillment',
            name='order',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.order'),
        ),
        migrations.AddField(
            model_name='fulfillment',
            name='provider',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.fulfillmentprovider'),
        ),
        migrations.AddField(
            model_name='fulfillment',
            name='swap',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.swap'),
        ),
        migrations.AddField(
            model_name='draftorder',
            name='order',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='store.order'),
        ),
        migrations.CreateModel(
            name='DiscountRule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('description', models.CharField(max_length=255, null=True)),
                ('type', models.CharField(choices=[('fixed', 'FIXED'), ('percentage', 'PERCENTAGE'), ('free_shipping', 'FREE_SHIPPING')], max_length=20)),
                ('value', models.FloatField()),
                ('allocation', models.CharField(choices=[('total', 'TOTAL'), ('item', 'ITEM')], max_length=20, null=True)),
                ('metadata', models.JSONField(null=True)),
                ('conditions', models.ManyToManyField(related_name='+', to='store.discountcondition')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DiscountConditionProductType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('metadata', models.JSONField(null=True)),
                ('discount_condition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.discountcondition')),
                ('product_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.producttype')),
            ],
            options={
                'unique_together': {('product_type', 'discount_condition')},
            },
        ),
        migrations.CreateModel(
            name='DiscountConditionProductTag',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('metadata', models.JSONField(blank=True, null=True)),
                ('discount_condition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.discountcondition')),
                ('product_tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.producttag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DiscountConditionProductCollection',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('metadata', models.JSONField(null=True)),
                ('discount_condition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.discountcondition')),
                ('product_collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.productcollection')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DiscountConditionProduct',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('metadata', models.JSONField(null=True)),
                ('discount_condition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.discountcondition')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.product')),
            ],
            options={
                'unique_together': {('product', 'discount_condition')},
            },
        ),
        migrations.CreateModel(
            name='DiscountConditionCustomerGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('metadata', models.JSONField(blank=True, null=True)),
                ('customer_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.customergroup')),
                ('discount_condition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.discountcondition')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='discountcondition',
            name='customer_groups',
            field=models.ManyToManyField(through='store.DiscountConditionCustomerGroup', to='store.customergroup'),
        ),
        migrations.AddField(
            model_name='discountcondition',
            name='discount_rule',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.discountrule'),
        ),
        migrations.AddField(
            model_name='discountcondition',
            name='product_collections',
            field=models.ManyToManyField(through='store.DiscountConditionProductCollection', to='store.productcollection'),
        ),
        migrations.AddField(
            model_name='discountcondition',
            name='product_tags',
            field=models.ManyToManyField(through='store.DiscountConditionProductTag', to='store.producttag'),
        ),
        migrations.AddField(
            model_name='discountcondition',
            name='product_types',
            field=models.ManyToManyField(through='store.DiscountConditionProductType', to='store.producttype'),
        ),
        migrations.AddField(
            model_name='discountcondition',
            name='products',
            field=models.ManyToManyField(through='store.DiscountConditionProduct', to='store.product'),
        ),
        migrations.AddField(
            model_name='discount',
            name='regions',
            field=models.ManyToManyField(related_name='+', to='store.region'),
        ),
        migrations.AddField(
            model_name='discount',
            name='rule',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.discountrule'),
        ),
        migrations.AddField(
            model_name='customergroup',
            name='price_lists',
            field=models.ManyToManyField(to='store.pricelist'),
        ),
        migrations.AddField(
            model_name='customer',
            name='groups',
            field=models.ManyToManyField(related_name='+', to='store.customergroup'),
        ),
        migrations.AddField(
            model_name='customer',
            name='orders',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.order'),
        ),
        migrations.AddField(
            model_name='country',
            name='region',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='store.region'),
        ),
        migrations.AddField(
            model_name='claimorder',
            name='additional_items',
            field=models.ManyToManyField(related_name='+', to='store.lineitem'),
        ),
        migrations.AddField(
            model_name='claimorder',
            name='claim_items',
            field=models.ManyToManyField(related_name='+', to='store.claimitem'),
        ),
        migrations.AddField(
            model_name='claimorder',
            name='fulfillments',
            field=models.ManyToManyField(related_name='+', to='store.fulfillment'),
        ),
        migrations.AddField(
            model_name='claimorder',
            name='order',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.order'),
        ),
        migrations.AddField(
            model_name='claimorder',
            name='return_order',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.return'),
        ),
        migrations.AddField(
            model_name='claimorder',
            name='shipping_address',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.address'),
        ),
        migrations.AddField(
            model_name='claimorder',
            name='shipping_methods',
            field=models.ManyToManyField(related_name='+', to='store.shippingmethod'),
        ),
        migrations.AddField(
            model_name='claimitem',
            name='claim_order',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='store.claimorder'),
        ),
        migrations.AddField(
            model_name='claimitem',
            name='images',
            field=models.ManyToManyField(to='store.claimimage'),
        ),
        migrations.AddField(
            model_name='claimitem',
            name='item',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.lineitem'),
        ),
        migrations.AddField(
            model_name='claimitem',
            name='tags',
            field=models.ManyToManyField(related_name='+', to='store.claimtag'),
        ),
        migrations.AddField(
            model_name='claimitem',
            name='variant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.productvariant'),
        ),
        migrations.AddField(
            model_name='claimimage',
            name='claim_item',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.claimitem'),
        ),
        migrations.AddField(
            model_name='cart',
            name='customer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='store.customer'),
        ),
        migrations.AddField(
            model_name='cart',
            name='discounts',
            field=models.ManyToManyField(blank=True, related_name='+', to='store.discount'),
        ),
        migrations.AddField(
            model_name='cart',
            name='gift_cards',
            field=models.ManyToManyField(blank=True, related_name='+', to='store.giftcard'),
        ),
        migrations.AddField(
            model_name='cart',
            name='items',
            field=models.ManyToManyField(blank=True, related_name='+', to='store.lineitem'),
        ),
        migrations.AddField(
            model_name='cart',
            name='payment',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='store.payment'),
        ),
        migrations.AddField(
            model_name='cart',
            name='payment_session',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='store.paymentsession'),
        ),
        migrations.AddField(
            model_name='cart',
            name='region',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.region'),
        ),
        migrations.AddField(
            model_name='cart',
            name='sales_channel',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='store.saleschannel'),
        ),
        migrations.AddField(
            model_name='cart',
            name='shipping_address',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='store.address'),
        ),
        migrations.AddField(
            model_name='cart',
            name='shipping_methods',
            field=models.ManyToManyField(blank=True, related_name='+', to='store.shippingmethod'),
        ),
        migrations.CreateModel(
            name='BatchJob',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('type', models.CharField(blank=True, max_length=255, null=True)),
                ('context', models.JSONField(blank=True, null=True)),
                ('result', models.JSONField(blank=True, null=True)),
                ('dry_run', models.BooleanField(blank=True, default=False)),
                ('pre_processed_at', models.DateTimeField(blank=True, null=True)),
                ('processing_at', models.DateTimeField(blank=True, null=True)),
                ('confirmed_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('canceled_at', models.DateTimeField(blank=True, null=True)),
                ('failed_at', models.DateTimeField(blank=True, null=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AnalyticsConfig',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('opt_out', models.BooleanField(default=False)),
                ('anonymize', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='address',
            name='country',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.country'),
        ),
        migrations.AddField(
            model_name='address',
            name='customer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.customer'),
        ),
        migrations.CreateModel(
            name='ShippingMethodTaxLine',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('code', models.CharField(max_length=255, unique=True)),
                ('shipping_method', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.shippingmethod')),
            ],
            options={
                'unique_together': {('shipping_method', 'code')},
            },
        ),
        migrations.CreateModel(
            name='GiftCardTransaction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('amount', models.IntegerField()),
                ('is_taxable', models.BooleanField(blank=True, null=True)),
                ('tax_rate', models.FloatField(blank=True, null=True)),
                ('gift_card', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.giftcard')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='store.order')),
            ],
            options={
                'unique_together': {('gift_card_id', 'order_id')},
            },
        ),
        migrations.CreateModel(
            name='CustomShippingOption',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('price', models.IntegerField()),
                ('metadata', models.JSONField(null=True)),
                ('cart', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='store.cart')),
                ('shipping_option', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.shippingoption')),
            ],
            options={
                'unique_together': {('shipping_option', 'cart')},
            },
        ),
    ]
